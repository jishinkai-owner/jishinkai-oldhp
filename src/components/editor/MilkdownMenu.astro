---
import "@fontsource-variable/material-symbols-outlined";

const iconClass = "material-icons material-icons-outlined";
const menuItems: ({
    type: "button",
    icon: string,
    label?: string,
    key: string,
} | {
    type: "select",
    label?: string,
    text: string,
    options: {
        id: number,
        icon?: string,
        content: string,
    }[],
})[][] = [
    [
        {
            type: "button",
            icon: "undo",
            label: "もどす",
            key: "Undo",
        },
        {
            type: "button",
            icon: "redo",
            label: "やり直す",
            key: "Redo",
        },
    ],
    [
        {
            type: "select",
            label: "見出し",
            text: "Heading",
            options: [
                { id: 1, icon: "format_h1", content: "Title Heading" },
                { id: 2, icon: "format_h2", content: "Major Heading" },
                { id: 3, icon: "format_h3", content: "Subheading" },
                { id: 4, icon: "format_h4", content: "Minor Heading" },
                { id: 5, icon: "format_h5", content: "Sub-Minor Heading" },
                { id: 6, icon: "format_h6", content: "Sub-Sub-Minor Heading" },
                { id: 0, icon: "match_case", content: "Plain Text" },
            ],
        },
    ],
    [
        {
            type: "button",
            icon: "format_bold",
            label: "太字",
            key: "ToggleStrong",
        },
        {
            type: "button",
            icon: "format_italic",
            label: "斜体",
            key: "ToggleEmphasis",
        },
        {
            type: "button",
            icon: "format_strikethrough",
            label: "取り消し線",
            key: "ToggleStrikeThrough",
        },
    ],
    [
        {
            type: "button",
            icon: "format_list_bulleted",
            label: "箇条書きにする",
            key: "WrapInBulletList",
        },
        {
            type: "button",
            icon: "format_list_numbered",
            label: "番号付きリストにする",
            key: "WrapInOrderedList",
        },
        /*{
            type: 'button',
            icon: 'checklist',
            label: 'タスクリストにする',
            key: 'TurnIntoTaskList',
        },*/
        {
            type: "button",
            icon: "format_indent_decrease",
            label: "インデントを減らす",
            key: "SplitListItem",
        },
        {
            type: "button",
            icon: "format_indent_increase",
            label: "インデントを増やす",
            key: "SinkListItem",
        },
    ],
    [
        {
            type: "button",
            icon: "image",
            label: "画像を挿入",
            key: "InsertImage",
        },
        {
            type: "button",
            icon: "table_chart",
            label: "表を挿入",
            key: "InsertTable",
        },
        {
            type: "button",
            icon: "code",
            label: "コードブロックにする",
            key: "CreateCodeBlock",
        },
    ],
    [
        {
            type: "button",
            icon: "format_quote",
            label: "引用にする",
            key: "WrapInBlockquote",
        },
        {
            type: "button",
            icon: "horizontal_rule",
            label: "水平線を挿入",
            key: "InsertHr",
        },
    ],
    [
        {
            type: "button",
            icon: "vertical_split",
            label: "分割ビューで編集",
            key: "ToggleSplitEditing",
        },
    ]
];
---

<div class="milkdown-menu">
    <ul role="menubar" aria-label="Editor menubar">
        {menuItems.map(
            (items, i) => {
                const list = items.map(item =>
                    <li class={`milkdown-menu-${item.type}`} role="none">
                        {item.type === "select" ?
                            <button role="menuitem" aria-label={item.text} title={item.label ?? item.text} aria-haspopup="true" aria-expanded="false" tabindex="0">
                                {item.text}
                                <span class={iconClass}>arrow_drop_down</span>
                            </button>
                            <ul role="menu" tabindex="-1">
                                {item.options.map(option =>
                                    <li role="menuitem" tabindex="-1" data-id={option.id}>
                                        <span class={iconClass}>{option.icon ?? ""}</span>
                                        {option.content}
                                    </li>
                                )}
                            </ul>
                        :   <button class={iconClass} role="menuitem" aria-label={item.key} title={item.label ?? item.key} data-key={item.key}>
                                {item.icon}
                            </button>
                        }
                    </li>
                );
                if (i < menuItems.length - 1) {
                    list.push(<div class="milkdown-menu-divider" role="separator"></div>);
                }
                return list;
            }
        )}
    </ul>
</div>

<style lang="scss">
.milkdown-menu {
    overflow-x: scroll;
    overflow-y: visible;

    &::-webkit-scrollbar {
        height: 2px;
        background-color: transparent;
    }

    &::-webkit-scrollbar-thumb {
        border-radius: 999px;
        background-color: #81a1c161;
        border: 0px solid transparent;
        background-clip: content-box;
    }

    &::-webkit-scrollbar-track {
        border-radius: 999px;
        background: transparent;
        border: 4px solid transparent;
    }

    .material-icons {
        font-family: "Material Symbols Outlined Variable", sans-serif;
        font-size: 1.5rem;
    }

    button {
        border: none;
        display: inline-flex;
        align-items: center;
        padding: 0.5rem 0.5rem;
        margin: 8px 0;
        font-size: 1rem;
        background-color: transparent;
        color: var(--menu-text);
        cursor: pointer;

        &:not(:only-child) {
            min-width: 160px;
            justify-content: space-between;

            > span {
                transition: transform 0.2s ease-in;
            }

            &:where([aria-expanded="true"]) > span {
                transform: rotate(-180deg);
            }
        }

        &:hover,
        &.active {
            background: var(--menu-bg-hover);
            color: var(--menu-text-hover);
        }
    }

    div[role="separator"] {
        flex-shrink: 0;
        width: 1px;
        background-color: var(--menu-border);
        margin: 12px 16px;
        min-height: 24px;
    }

    ul {
        list-style: none;
        margin: 0;
        background-color: var(--menu-bg);

        &[role="menubar"] {
            display: flex;
            align-items: center;
        }

        &[role="menu"] {
            display: none;
            margin: 0;
            padding: 0;
            position: absolute;
            border: 1px solid var(--menu-border);
            background-color: var(--menu-bg);

            &.show {
                display: block;
            }

            li[role="menuitem"] {
                padding: 6px;
                color: var(--menu-text);
                cursor: pointer;
                padding: 0.75rem 1rem;
                font-size: 14px;
                min-width: 160px;

                span {
                    vertical-align: middle;
                }

                &:is(:hover, :focus) {
                    background-color: var(--menu-bg-hover);
                    color: var(--menu-text-hover);
                }
            }
        }
    }
}
</style>
